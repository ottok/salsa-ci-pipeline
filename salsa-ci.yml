variables:
  DEBFULLNAME: "Salsa Pipeline"
  DEBEMAIL: "<salsa-pipeline@debian.org>"
  DEBIAN_FRONTEND: noninteractive
  WORKING_DIR: $CI_PROJECT_DIR/debian/output
  RELEASE: 'unstable'

stages:
  - build
  - test

.artifacts: &artifacts
    name: "$CI_JOB_NAME:$CI_COMMIT_REF_NAME"
    paths:
        - ${WORKING_DIR}/

.artifacts-long-expire: &artifacts-long-expire
  artifacts:
    expire_in: 180 day
    <<: *artifacts

.artifacts-default-expire: &artifacts-default-expire
  artifacts:
    <<: *artifacts

.build-definition: &build-definition
  stage: build
  image: registry.salsa.debian.org/salsa-ci-team/images/gbp
  services:
    - docker:dind
  cache:
    paths:
      - ${CCACHE_WORK_DIR}
  variables:
    CCACHE_TMP_DIR: ${CI_PROJECT_DIR}/../.ccache
    CCACHE_WORK_DIR: ${WORKING_DIR}/.ccache
  script:
    - |
      curl https://prittiau.debian.net/post -X POST --data "{\"project_id\":$CI_PROJECT_ID, \"pipeline_id\":$CI_PIPELINE_ID}" --header "Content-Type: application/json"
    - mkdir -p ${CCACHE_WORK_DIR}
    - mv ${CCACHE_WORK_DIR} ${CCACHE_TMP_DIR}
    - gbp pull --ignore-branch --pristine-tar --track-missing
    - gbp buildpackage --git-ignore-branch --git-export-dir=${WORKING_DIR} --git-builder="docker-build.sh registry.salsa.debian.org/salsa-ci-team/images/dockerbuilder:${RELEASE}"
    - mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}

.build-package: &build-package
  <<: *build-definition
  <<: *artifacts-default-expire

.test-autopkgtest: &test-autopkgtest
  stage: test
  image: registry.salsa.debian.org/salsa-ci-team/images/autopkgtest
  script:
    - wget https://salsa.debian.org/salsa-ci-team/autopkgtest-lxc/-/jobs/artifacts/master/raw/artifacts/lxc.tar?job=${RELEASE} -O lxc.tar
    - mkdir ${SCI_LXC_PATH} && tar xf lxc.tar -C ${SCI_LXC_PATH}
    - sed -i "s@salsa-ci-team/autopkgtest-lxc@${CI_PROJECT_PATH}@" ${SCI_LXC_PATH}/autopkgtest-${RELEASE}-amd64/config
    - |
        cat >/etc/lxc/lxc.conf <<EOT
        lxc.lxcpath=${SCI_LXC_PATH}
        EOT
    - umount -R /sys/fs/cgroup && mount -a
    - /etc/init.d/lxc-net start
    - /etc/init.d/lxc start
    - debci localtest $CI_PROJECT_DIR/debian/output/*.changes --suite ${RELEASE} || [ $? -eq 8 ]
  variables:
      GIT_STRATEGY: none
      SCI_LXC_PATH: ${CI_PROJECT_DIR}/lxc

.test-blhc: &test-blhc
  stage: test
  image: registry.salsa.debian.org/salsa-ci-team/images/blhc
  script:
    - blhc --debian --line-numbers --color ${WORKING_DIR}/*.build || [ $? -eq 1 ]
  variables:
      GIT_STRATEGY: none

.test-lintian: &test-lintian
  stage: test
  image: registry.salsa.debian.org/salsa-ci-team/images/lintian:${RELEASE}
  script:
    - lintian ${WORKING_DIR}/*.changes | tee lintian.output
    - cat lintian.output | /root/go/bin/lintian2junit > ${WORKING_DIR}/lintian.xml
  variables:
      GIT_STRATEGY: none
  artifacts:
    reports:
      junit: ${WORKING_DIR}/lintian.xml

.test-reprotest: &test-reprotest
  stage: test
  image: registry.salsa.debian.org/salsa-ci-team/images/reprotest
  artifacts:
    name: "$CI_JOB_NAME:$CI_COMMIT_REF_NAME"
    paths:
      - $CI_PROJECT_DIR/reprotest.log
    when: always
  variables:
    REPROTEST_EXTRA_ARGS: '--no-diffoscope'
  script:
    - apt-get update
    - eatmydata apt-get build-dep -y .
    - eatmydata reprotest --min-cpus $(nproc --all) --store-dir ${WORKING_DIR}/reprotest ${REPROTEST_EXTRA_ARGS} . -- null &> "${CI_PROJECT_DIR}/reprotest.log"
  after_script:
    - tail -n 5000 "${CI_PROJECT_DIR}/reprotest.log" >&2;

.test-reprotest-diffoscope: &test-reprotest-diffoscope
  <<: *test-reprotest
  variables:
    REPROTEST_EXTRA_ARGS: ''

.test-piuparts: &test-piuparts
  stage: test
  image: registry.salsa.debian.org/salsa-ci-team/images/piuparts
  services:
    - docker:dind
  script:
    - CHROOT_PATH="/tmp/debian-chroot"
    - CONTAINER_ID=$(docker run --rm -d "registry.salsa.debian.org/salsa-ci-team/images/base:$RELEASE" sleep infinity)
    - docker exec ${CONTAINER_ID} bash -c "apt-get update && apt-get install eatmydata -y"
    - mkdir -p ${CHROOT_PATH}
    - docker export ${CONTAINER_ID} | tar -C ${CHROOT_PATH} -xf -
    - mknod -m 666 ${CHROOT_PATH}/dev/urandom c 1 9
    - mkdir -p /srv/local-apt-repository/ && cp -a ${WORKING_DIR}/*.deb /srv/local-apt-repository/ && /usr/lib/local-apt-repository/rebuild
    - mkdir -p ${CHROOT_PATH}/etc-target/apt/sources.list.d ${CHROOT_PATH}/etc-target/apt/preferences.d
    - cp -aTLv /etc/apt/sources.list.d  ${CHROOT_PATH}/etc-target/apt/sources.list.d
    - cp -aTLv /etc/apt/preferences.d  ${CHROOT_PATH}/etc-target/apt/preferences.d
    - cp -aTLv /srv/local-apt-repository ${CHROOT_PATH}/srv/local-apt-repository
    - cp -aTLv /var/lib/local-apt-repository/ ${CHROOT_PATH}/var/lib/local-apt-repository/
    - sed -i '1s/^/127.0.0.1 pipeline.salsa.debian.org localhost\n/' ${CHROOT_PATH}/etc/hosts
    - PIUPARTS_DISTRIBUTION_ARG=''
    - '[ "$RELEASE" = unstable -o "$RELEASE" = experimental -o "$RELEASE" = testing ] || PIUPARTS_DISTRIBUTION_ARG="--distribution $RELEASE/updates"'
    - '[ "${RELEASE/-backports/}" = "$RELEASE" ] || PIUPARTS_DISTRIBUTION_ARG="--distribution $RELEASE"'
    - |
        for PACKAGE in $(ls ${WORKING_DIR}/*.deb); do
            piuparts --scriptsdir /etc/piuparts/scripts --allow-database --warn-on-leftovers-after-purge --hard-link -e ${CHROOT_PATH} ${PIUPARTS_DISTRIBUTION_ARG} ${PACKAGE}
        done
  variables:
      GIT_STRATEGY: none
