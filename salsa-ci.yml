# Copyright salsa-ci-team and others
# SPDX-License-Identifier: FSFAP
# Copying and distribution of this file, with or without modification, are
# permitted in any medium without royalty provided the copyright notice and
# this notice are preserved. This file is offered as-is, without any warranty.

variables:
  DEBFULLNAME: "Salsa Pipeline"
  DEBEMAIL: "<salsa-pipeline@debian.org>"
  DEBIAN_FRONTEND: noninteractive
  WORKING_DIR: $CI_PROJECT_DIR/debian/output
  VENDOR: 'debian'
  RELEASE: 'unstable'
  SALSA_CI_MIRROR: 'http://deb.debian.org/debian'
  SALSA_CI_COMPONENTS: 'main'
  SALSA_CI_IMAGES: 'registry.salsa.debian.org/salsa-ci-team/pipeline'
  SALSA_CI_IMAGES_AUTOPKGTEST: ${SALSA_CI_IMAGES}/autopkgtest
  SALSA_CI_IMAGES_BASE: ${SALSA_CI_IMAGES}/base:${RELEASE}
  SALSA_CI_IMAGES_GENERIC_TESTS: ${SALSA_CI_IMAGES}/generic_tests:${RELEASE}
  SALSA_CI_IMAGES_BLHC: ${SALSA_CI_IMAGES}/blhc:latest
  SALSA_CI_IMAGES_DOCKERBUILDER: $SALSA_CI_IMAGES/dockerbuilder:${RELEASE}
  SALSA_CI_IMAGES_GBP: ${SALSA_CI_IMAGES}/gbp:latest
  SALSA_CI_IMAGES_LINTIAN: ${SALSA_CI_IMAGES}/lintian:${RELEASE}
  SALSA_CI_IMAGES_PIUPARTS: ${SALSA_CI_IMAGES}/piuparts:latest
  SALSA_CI_IMAGES_REPROTEST: ${SALSA_CI_IMAGES}/reprotest:latest
  SALSA_CI_AUTOPKGTEST_LXC: https://salsa.debian.org/salsa-ci-team/autopkgtest-lxc
  SALSA_CI_PIUPARTS_ARGS: ''
  DOCKER_TLS_CERTDIR: ""
  SALSA_CI_DISABLE_MISSING_BREAKS: 1

stages:
  - build
  - test

.artifacts: &artifacts
    name: "$CI_JOB_NAME:$CI_COMMIT_REF_NAME"
    when: always
    paths:
        - ${WORKING_DIR}/

.artifacts-long-expire: &artifacts-long-expire
  artifacts:
    expire_in: 180 day
    <<: *artifacts

.artifacts-default-expire: &artifacts-default-expire
  artifacts:
    <<: *artifacts

.build-before-script: &build-before-script |
   mkdir -p ${WORKING_DIR} ${CCACHE_WORK_DIR}
   mv ${CCACHE_WORK_DIR} ${CCACHE_TMP_DIR}
   gbp pull --ignore-branch --pristine-tar --track-missing

.build-script: &build-script |
   # Check if we can obtain the orig from the git branches
   if ! gbp export-orig --pristine-tar --tarball-dir=${WORKING_DIR}; then
     # Fallback using origtargz
     origtargz -dt
     mv ../*.orig.* ${WORKING_DIR}
     gbp_args="--git-overlay"
   fi
   gbp buildpackage --git-ignore-branch --git-ignore-new --git-no-create-orig $gbp_args --git-export-dir=${WORKING_DIR} --git-builder="docker-build.sh ${SALSA_CI_IMAGES_DOCKERBUILDER} ${DB_BUILD_PARAM}"

.build-definition: &build-definition
  stage: build
  image: $SALSA_CI_IMAGES_GBP
  services:
    - docker:dind
  cache:
    paths:
      - ${CCACHE_WORK_DIR}
  variables:
    CCACHE_TMP_DIR: ${CI_PROJECT_DIR}/../.ccache
    CCACHE_WORK_DIR: ${WORKING_DIR}/.ccache
    DB_BUILD_PARAM: ''
  script:
    - *build-before-script
    - *build-script
    - mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}

.build-package: &build-package
  <<: *build-definition
  <<: *artifacts-default-expire

.test-build-package-any: &test-build-package-any
  <<: *build-definition
  stage: test
  dependencies: []
  variables:
     CCACHE_TMP_DIR: ${CI_PROJECT_DIR}/../.ccache
     CCACHE_WORK_DIR: ${WORKING_DIR}/.ccache
     DB_BUILD_PARAM: ''
  script:
    - *build-before-script
    - LOCAL_ARCH=`dpkg --print-architecture`
    - |
        if egrep -q "^Architecture:.*(any|[^\!]${LOCAL_ARCH})" debian/control; then
            DB_BUILD_PARAM="--build=any"
        else
            echo "###########################################"
            echo "### No binary package of type any or ${LOCAL_ARCH} found"
            echo "### Stopping test-build-any test."
            echo "###########################################"
            echo "You should disable this job as following:"
            echo "variables:"
            echo "  SKIP_TEST_BUILD_PACKAGE_ANY: 'yes'"
            mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}
            exit 0
        fi
    - *build-script
    - mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}
  except:
    variables:
      - $SKIP_TEST_BUILD_PACKAGE_ANY == 'yes'
      - $RELEASE == 'jessie'


.test-build-package-all: &test-build-package-all
  <<: *build-definition
  stage: test
  dependencies: []
  variables:
     CCACHE_TMP_DIR: ${CI_PROJECT_DIR}/../.ccache
     CCACHE_WORK_DIR: ${WORKING_DIR}/.ccache
     DB_BUILD_PARAM: ''
  script:
    - *build-before-script
    - LOCAL_ARCH=`dpkg --print-architecture`
    - |
        if grep -q "^Architecture: all" debian/control; then
            DB_BUILD_PARAM="--build=all"
        else
            echo "###########################################"
            echo "### No binary package of type all found"
            echo "### Stopping test-build-all test."
            echo "###########################################"
            echo "You should disable this job as following:"
            echo "variables:"
            echo "  SKIP_TEST_BUILD_PACKAGE_ALL: 'yes'"
            mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}
            exit 0;
        fi
    - *build-script
    - mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}
  except:
    variables:
      - $SKIP_TEST_BUILD_PACKAGE_ALL == 'yes'
      - $RELEASE == 'jessie'

.test-autopkgtest: &test-autopkgtest
  stage: test
  image: $SALSA_CI_IMAGES_AUTOPKGTEST
  except:
    variables:
      - $SALSA_CI_DISABLE_AUTOPKGTEST =~ /^(1|yes|true)$/
  script:
    - wget --progress=dot:giga ${SALSA_CI_AUTOPKGTEST_LXC}/-/jobs/artifacts/master/raw/artifacts/lxc.tar?job=${RELEASE} -O lxc.tar
    - mkdir ${SCI_LXC_PATH} && tar xf lxc.tar -C ${SCI_LXC_PATH}
    - sed -i "/lxc.rootfs.path/ s@dir:.*/lxc/@dir:${SCI_LXC_PATH}/@" ${SCI_LXC_PATH}/autopkgtest-${RELEASE}-amd64/config
    - |
        cat >/etc/lxc/lxc.conf <<EOT
        lxc.lxcpath=${SCI_LXC_PATH}
        EOT
    - umount -R /sys/fs/cgroup && mount -a
    - /etc/init.d/lxc-net start
    - /etc/init.d/lxc start
    - debci localtest $CI_PROJECT_DIR/debian/output/*.changes --suite ${RELEASE} || ( ret=$?; [ $ret -eq 8 ] || [ $ret -eq 2 ] )
  variables:
      GIT_STRATEGY: none
      SCI_LXC_PATH: ${CI_PROJECT_DIR}/lxc

.test-blhc: &test-blhc
  stage: test
  image: $SALSA_CI_IMAGES_BLHC
  except:
    variables:
      - $SALSA_CI_DISABLE_BLHC =~ /^(1|yes|true)$/
  script:
    - blhc --debian --line-numbers --color ${WORKING_DIR}/*.build || [ $? -eq 1 ]
  variables:
      GIT_STRATEGY: none

.test-lintian: &test-lintian
  stage: test
  image: $SALSA_CI_IMAGES_LINTIAN
  except:
    variables:
      - $SALSA_CI_DISABLE_LINTIAN =~ /^(1|yes|true)$/
  script:
    - lintian ${WORKING_DIR}/*.changes | tee lintian.output
    - lintian2junit.py --lintian-file lintian.output > ${WORKING_DIR}/lintian.xml
  variables:
      GIT_STRATEGY: none
  artifacts:
    reports:
      junit: ${WORKING_DIR}/lintian.xml

.test-reprotest: &test-reprotest
  stage: test
  image: $SALSA_CI_IMAGES_REPROTEST
  except:
    variables:
      - $SALSA_CI_DISABLE_REPROTEST =~ /^(1|yes|true)$/
  artifacts:
    name: "$CI_JOB_NAME:$CI_COMMIT_REF_NAME"
    paths:
      - $WORKING_DIR/reprotest
      - $WORKING_DIR/reprotest.log
    when: always
  script:
    - apt-get update
    - eatmydata apt-get build-dep -y .
    - eatmydata reprotest --min-cpus $(nproc --all) --store-dir ${WORKING_DIR}/reprotest --verbosity=2 ${SALSA_CI_REPROTEST_EXTRA_ARGS} ${REPROTEST_DIFFOSCOPE} . -- null |& tee "${WORKING_DIR}/reprotest.log"

# Only for compat with the old way of enabling diffoscope
.test-reprotest-no-diffoscope: &test-reprotest-no-diffoscope
  <<: *test-reprotest
  variables:
    REPROTEST_DIFFOSCOPE: "--no-diffoscope"

.test-reprotest-diffoscope: &test-reprotest-diffoscope
  <<: *test-reprotest
  variables:
    REPROTEST_DIFFOSCOPE: ""

.test-piuparts: &test-piuparts
  stage: test
  image: $SALSA_CI_IMAGES_PIUPARTS
  except:
    variables:
      - $SALSA_CI_DISABLE_PIUPARTS =~ /^(1|yes|true)$/
  services:
    - docker:dind
  script:
    - CHROOT_PATH="/tmp/debian-chroot"
    - CONTAINER_ID=$(docker run --rm -d "${SALSA_CI_IMAGES_BASE}" sleep infinity)
    - docker exec ${CONTAINER_ID} bash -c "apt-get update && apt-get install eatmydata -y"
    - mkdir -p ${CHROOT_PATH}
    - docker export ${CONTAINER_ID} | tar -C ${CHROOT_PATH} -xf -
    - mknod -m 666 ${CHROOT_PATH}/dev/urandom c 1 9
    - mkdir -p /srv/local-apt-repository/ && cp -a ${WORKING_DIR}/*.deb /srv/local-apt-repository/ && /usr/lib/local-apt-repository/rebuild
    - mkdir -p ${CHROOT_PATH}/etc-target/apt/sources.list.d ${CHROOT_PATH}/etc-target/apt/preferences.d
    - cp -aTLv /etc/apt/sources.list.d  ${CHROOT_PATH}/etc-target/apt/sources.list.d
    - cp -aTLv /etc/apt/preferences.d  ${CHROOT_PATH}/etc-target/apt/preferences.d
    - cp -aTLv /srv/local-apt-repository ${CHROOT_PATH}/srv/local-apt-repository
    - cp -aTLv /var/lib/local-apt-repository/ ${CHROOT_PATH}/var/lib/local-apt-repository/
    - sed  '/127.0.0.1/s/localhost/pipeline.salsa.debian.org localhost/' /etc/hosts > ${CHROOT_PATH}/etc/hosts
    - PIUPARTS_DISTRIBUTION_ARG="--distribution $RELEASE"
    - |
        if [ "$VENDOR" = "debian" ]; then \
            [ "$RELEASE" = unstable -o "$RELEASE" = experimental -o "$RELEASE" = testing ] || PIUPARTS_DISTRIBUTION_ARG="--distribution $RELEASE/updates"; \
            [ "${RELEASE/-backports/}" = "$RELEASE" ] || PIUPARTS_DISTRIBUTION_ARG="--distribution $RELEASE"; \
        fi
    - |
        for PACKAGE in $(ls ${WORKING_DIR}/*.deb); do
            piuparts --mirror "${SALSA_CI_MIRROR} ${SALSA_CI_COMPONENTS}" ${SALSA_CI_PIUPARTS_ARGS} --scriptsdir /etc/piuparts/scripts --allow-database --warn-on-leftovers-after-purge --hard-link -e ${CHROOT_PATH} ${PIUPARTS_DISTRIBUTION_ARG} ${PACKAGE}
        done
  variables:
      GIT_STRATEGY: none

.test-rc-bugs: &test-rc-bugs
  stage: test
  image: $SALSA_CI_IMAGES_GENERIC_TESTS
  script:
    - check_rc_bugs.py -o ${WORKING_DIR}/rc_bugs.xml --changes-file ${WORKING_DIR}/*.changes
  artifacts:
    reports:
      junit: ${WORKING_DIR}/rc_bugs.xml
  variables:
      GIT_STRATEGY: none

.test-missing-breaks: &test-missing-breaks
  stage: test
  image: $SALSA_CI_IMAGES_GENERIC_TESTS
  except:
    variables:
      - $SALSA_CI_DISABLE_MISSING_BREAKS =~ /^(1|yes|true)$/
  script:
    - apt-get update
    - check_for_missing_breaks_replaces.py -o ${WORKING_DIR}/missing_breaks.xml --changes-file ${WORKING_DIR}/*.changes
  artifacts:
    reports:
      junit: ${WORKING_DIR}/missing_breaks.xml
  variables:
      GIT_STRATEGY: none
