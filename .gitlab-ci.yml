# Copyright salsa-ci-team and others
# SPDX-License-Identifier: FSFAP
# Copying and distribution of this file, with or without modification, are
# permitted in any medium without royalty provided the copyright notice and
# this notice are preserved. This file is offered as-is, without any warranty.
---
workflow:
  rules:
    # Avoid duplicated pipelines, do not run detached pipelines.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        IMAGE_VERSION: latest
        AUTOPKGTEST_IMAGE_VERSION: latest
        BUILD_IMAGE_VERSION: latest
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      variables:
        IMAGE_VERSION: sid_${CI_COMMIT_REF_SLUG}
        AUTOPKGTEST_IMAGE_VERSION: ${STABLE}_${CI_COMMIT_REF_SLUG}
        BUILD_IMAGE_VERSION: sid_${CI_COMMIT_REF_SLUG}
    - when: always
  auto_cancel:
    on_new_commit: interruptible

variables:
  DOCKER_TLS_CERTDIR: ""
  SALSA_CI_DISABLE_APTLY: "false"
  SALSA_CI_PERSIST_IMAGES:
    description: "Images are clean at the end of a pipeline of a staging branch. Set this to 1 to don't clean them"
    value: 0
  SALSA_CI_DISABLE_BUILD_IMAGES:
    description: "Set this to 1 if you want to disable the jobs that build the images"
    value: 0
  BUILD_ALL_IMAGES:
    description: "Set this to 1 if you want to build the full set of images, even in staging branches"
    value: 0
  BUILD_UBUNTU_IMAGES:
    description: "Set this to 1 if you want to build ubuntu images on GitLab instances other than Salsa"
    value: 0
  SALSA_CI_ARM_RUNNER_TAG: "arm64"
  SALSA_CI_RISCV_RUNNER_TAG: "riscv64"
  SALSA_CI_PPC64EL_RUNNER_TAG: "ppc64el"
  # Used by .images-debian.yml to define the base for the
  # autopkgtest image
  STABLE: "trixie"
  # enable full command logging in job logs
  FF_SCRIPT_SECTIONS: "true"
  BUILD_ELXR_IMAGES:
    # Build images used by the eLxr CI in https://gitlab.com/elxr/ci/pipeline/
    value: 0

stages:
  - images
  - test
  - clean

images:
  stage: images
  trigger:
    include:
      - local: .images-debian.yml
    strategy: depend
    # https://gitlab.com/gitlab-org/gitlab/-/issues/341508#note_1939725601
    forward:
      pipeline_variables: true
  rules:
    - if: $SALSA_CI_DISABLE_BUILD_IMAGES !~ /^(1|yes|true)$/
      when: always

ubuntu-images:
  stage: images
  trigger:
    include:
      - local: .images-ubuntu.yml
    strategy: depend
    forward:
      pipeline_variables: true
  rules:
    - if: $BUILD_UBUNTU_IMAGES =~ /^(1|yes|true)$/
      when: always
    - if: $CI_SERVER_URL != "https://salsa.debian.org"
      when: never
    - if: $SALSA_CI_DISABLE_BUILD_IMAGES !~ /^(1|yes|true)$/
      when: always

elxr-images:
  stage: images
  trigger:
    include:
      - local: .images-elxr.yml
    strategy: depend
    forward:
      pipeline_variables: true
  rules:
    - if: $BUILD_ELXR_IMAGES !~ /^(1|yes|true)$/
      when: never
    - if: $SALSA_CI_DISABLE_BUILD_IMAGES !~ /^(1|yes|true)$/
      when: always

.self-checks:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/base:${IMAGE_VERSION}
  dependencies: []
  variables:
    RELEASE: sid
  rules:
    - if: $CI_SERVER_URL != "https://salsa.debian.org"
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH

check license + contributor:
  extends: .self-checks
  before_script:
    - apt-get update && apt-get upgrade -y
    - apt-get install -y licensecheck
  script:
    - PROBLEMS=0
    # check files without any license
    # Example licensecheck output that is filtered with grep:
    #   ./README.md: *No copyright* UNKNOWN
    - |
      BAD_FILES=$(licensecheck -r . | \
      grep -Ev '(recipes/)|(images/files/)|(images/patches/)|(screenshots/)|CONTRIBUTORS|(\.md:)' | \
      grep UNKNOWN) || true
    - |
      [ -z "$BAD_FILES" ] || \
      (echo "ERROR: Missing license statement in the following files:"; \
      echo "$BAD_FILES"; exit 1) || \
      PROBLEMS=$(($PROBLEMS + 1))
    # check email or name is in the list of contributors
    - |
      grep -q "${GITLAB_USER_EMAIL}" CONTRIBUTORS || \
      grep -q "${GITLAB_USER_NAME}" CONTRIBUTORS || \
      (echo "ERROR: ${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}> missing in the CONTRIBUTORS file"; exit 1) || \
      PROBLEMS=$(($PROBLEMS + 1))
    - exit $PROBLEMS

check gpg signature:
  extends: .self-checks
  before_script:
    - apt-get update && apt-get upgrade -y
    - apt-get install -y --no-install-recommends debian-keyring dirmngr git gpg gpg-agent ca-certificates
  script:
    - mkdir -p ${HOME}/.gnupg
    - chmod 600 ${HOME}/.gnupg
    - echo "keyring /usr/share/keyrings/debian-keyring.gpg" >> ${HOME}/.gnupg/gpg.conf
    - echo "keyring /usr/share/keyrings/debian-maintainers.gpg" >> ${HOME}/.gnupg/gpg.conf
    - echo "keyring /usr/share/keyrings/debian-nonupload.gpg" >> ${HOME}/.gnupg/gpg.conf
    - echo "Checking that contributors have signed git commits following to CONTRIBUTING.md .."
    # The field %GK is the only one that will have a key ID if before the key has been downloaded
    - SIGNING_KEY="$(git log --pretty="%GK" HEAD~1..HEAD)"
    - 'if [ -z "$SIGNING_KEY" ]; then echo "ERROR: Git commit message signature missing!" && exit 1; fi'
    # Try OpenPGP first and if key was not found, try the Ubuntu keyserver.
    # Defining the keyserver for OpenPGP is done to be explicit, but it not
    # strictly necessary as is it is the default keyserver in GnuPG anyway
    - >
      (gpg --verbose --keyserver hkps://keys.openpgp.org:443 --recv-key $SIGNING_KEY ||
      gpg --verbose --keyserver hkps://keyserver.ubuntu.com:443 --recv-key $SIGNING_KEY) ||
      (echo "ERROR: Key not found. Please upload it to the OpenPGP or Ubuntu keyserver." && exit 1)
    - >
      GIT_TRACE2=true git verify-commit HEAD --raw --verbose ||
      (echo "ERROR: Signature is invalid. Please sign your commits correctly. See CONTRIBUTING.md for details." && exit 1)

check yaml lint:
  extends: .self-checks
  before_script:
    - apt-get update && apt-get upgrade -y
    - apt-get install -y yamllint
  script:
    - yamllint .

test-pipeline:
  trigger:
    include:
      - local: .pipeline-test.yml
    strategy: depend
  parallel:
    matrix:
      - PROJECT_URL: https://salsa.debian.org/debian/grep
        SALSA_CI_DISABLE_WRAP_AND_SORT: 0
        SALSA_CI_WRAP_AND_SORT_ARGS: '--wrap-always --short-indent --trailing-comma'
        SALSA_CI_PIUPARTS_ARGS: --extra-repo="deb http://deb.debian.org/debian sid non-free"
        SALSA_CI_BLHC_ARGS: --ignore-line "some harmless line"
        SALSA_CI_SBUILD_VERBOSE: 1
        SALSA_CI_LINTIAN_SUPPRESS_TAGS: 'unreleased-changes'
        SALSA_CI_EXTRA_REPOSITORY: "deb-src http://deb.debian.org/debian unstable main"
        SALSA_CI_EXTRA_REPOSITORY_KEY: /usr/share/keyrings/debian-archive-keyring.gpg
      - PROJECT_URL: https://salsa.debian.org/debian/grep
        PROJECT_TARGET_HEAD: debian/master
        SALSA_CI_ENABLE_BUILD_PACKAGE_PROFILES: 1
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DISABLE_APTLY: 1
        SALSA_CI_ENABLE_LICENSERECON: 1
        SALSA_CI_ENABLE_WRAP_AND_SORT: 1
        SALSA_CI_WRAP_AND_SORT_ARGS: '--wrap-always --short-indent --trailing-comma'
        BUILD_PROFILES:
          - nocheck,nodoc
      # test building the grep bookworm version
      - PROJECT_URL: https://salsa.debian.org/debian/grep
        PROJECT_TARGET_HEAD: debian/3.8-5
        # d/changelog targets unstable, so we need to manually define the RELEASE
        RELEASE: bookworm
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DPKG_BUILDPACKAGE_ARGS: --build-profiles=nocheck
        SALSA_CI_DISABLE_APTLY: 1
      # test building the grep bullseye version
      - PROJECT_URL: https://salsa.debian.org/debian/grep
        PROJECT_TARGET_HEAD: debian/3.6-1+deb11u1
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DPKG_BUILDPACKAGE_ARGS: --build-profiles=nocheck
        SALSA_CI_DISABLE_APTLY: 1
      # test building on experimental
      - PROJECT_URL: https://salsa.debian.org/debian/grep
        PROJECT_TARGET_HEAD: salsa-ci/debian/experimental
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DPKG_BUILDPACKAGE_ARGS: --build-profiles=nocheck
        SALSA_CI_DISABLE_APTLY: 1
      # test building on bookworm-backports
      - PROJECT_URL: https://salsa.debian.org/debian/grep
        PROJECT_TARGET_HEAD: salsa-ci/debian/bookworm-backports
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DPKG_BUILDPACKAGE_ARGS: --build-profiles=nocheck
        SALSA_CI_DISABLE_APTLY: 1
      # curl is used to test calling reprotest and passing an --append-build-command
      - PROJECT_URL: https://salsa.debian.org/debian/curl
        PROJECT_TARGET_HEAD: debian/bookworm
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_ENABLE_REPROTEST: 1
        SALSA_CI_DPKG_BUILDPACKAGE_ARGS: --build-profiles=nocheck
        SALSA_CI_DISABLE_APTLY: 1
        SALSA_CI_DISABLE_CCACHE: 1
      # boxes is used to test gbp setup-gitattributes (#322)
      # - PROJECT_URL: https://salsa.debian.org/otto/boxes
      #   SALSA_CI_DISABLE_GBP_SETUP_GITATTRIBUTES: 1
      #
      # cloudflare-ddns is used to verify that the build source job only
      # satisfies Build-Depends and Build-Conflicts. See:
      # https://salsa.debian.org/salsa-ci-team/pipeline/-/issues/187.
      # It is also used to test the package clean up validation, that replaces
      # the build twice test job.
      - PROJECT_URL: https://salsa.debian.org/tachi/cloudflare-ddns/
        PROJECT_TARGET_HEAD: debian/2.1.0-2
        SALSA_CI_ENABLE_VALIDATE_PACKAGE_CLEAN_UP: 1
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DISABLE_APTLY: 1
      # iortcw is used to test enabling additional APT components (contrib,
      # non-free) via SALSA_CI_COMPONENTS for packages with dependencies
      # outside 'main'.
      - PROJECT_URL: https://salsa.debian.org/games-team/iortcw
        PROJECT_TARGET_HEAD: debian/latest
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DISABLE_APTLY: 1
        SALSA_CI_ENABLE_PIUPARTS: 1
        SALSA_CI_COMPONENTS: 'main contrib non-free'
      # systemd's test-cgroup test fails during build time on unshare.
      # Its pipeline definition for bookworm runs with DEB_BUILD_OPTIONS:
      # "nocheck"
      - PROJECT_URL: https://salsa.debian.org/systemd-team/systemd
        PROJECT_TARGET_HEAD: debian/bookworm
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DISABLE_APTLY: 1
      # hello 2.10-3 should be built for bookworm, even if its debian/changelog
      # targets unstable. This test helps to verify that the RELEASE variable
      # is honored by the pipeline.
      - PROJECT_URL: https://salsa.debian.org/sanvila/hello
        PROJECT_TARGET_HEAD: debian/2.10-3
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DISABLE_APTLY: 1
        RELEASE: bookworm
      # OCaml projects were unable to use the Salsa CI pipeline with the
      # obsolete extract-source job. See #200.
      - PROJECT_URL: https://salsa.debian.org/ocaml-team/ocaml-ffmpeg.git
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DISABLE_BUILD_PACKAGE_I386: 1
        SALSA_CI_DISABLE_APTLY: 1
      - PROJECT_URL: https://salsa.debian.org/ruby-team/ruby-graphql
        PROJECT_TARGET_HEAD: debian/latest
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DISABLE_APTLY: 1
        SALSA_CI_DISABLE_BUILD_PACKAGE_I386: 1
        SALSA_CI_ENABLE_BUILD_REVERSE_DEPENDENCIES: 1

# test pipeline to test the build jobs in architectures non-enabled-by-default
# While we don't have shared runners for these architectures, this pipeline
# has to be manually triggered in Salsa CI/pipeline forks.
test-pipeline-non-default-archs:
  extends: test-pipeline
  trigger:
    include:
      - local: .pipeline-test.yml
    strategy: depend
  rules:
    # Disable all ARM jobs until salsa.debian.org has ARM runners available again
    # - if: $CI_SERVER_URL == "https://salsa.debian.org" && $CI_PROJECT_PATH == "salsa-ci-team/pipeline"
    #   when: always
    - if: $SALSA_CI_TEST_NON_DEFAULT_ARCHS =~ /^(1|yes|true)$/
      when: always
    - when: manual
  parallel:
    matrix:
      - PROJECT_URL: https://salsa.debian.org/debian/grep
        PROJECT_TARGET_HEAD: debian/master
        SALSA_CI_DISABLE_ALL_TESTS: 1
        SALSA_CI_DISABLE_APTLY: 1
        SALSA_CI_DISABLE_BUILD_PACKAGE_ARM64: 0
        SALSA_CI_DISABLE_BUILD_PACKAGE_ARMEL: 0
        SALSA_CI_DISABLE_BUILD_PACKAGE_ARMHF: 0
        # disable riscv64 temporairly until runners are operational again
        SALSA_CI_DISABLE_BUILD_PACKAGE_RISCV64: 1
  allow_failure: true

ubuntu-test-pipeline:
  variables:
    # gitlab doesn't pass these variables from var/ubuntu.yml
    VENDOR: 'ubuntu'
    DEFAULT_RELEASE: 'plucky'
    SALSA_CI_MIRROR: 'http://archive.ubuntu.com/ubuntu'
  trigger:
    include:
      - local: .pipeline-test-ubuntu.yml
    strategy: depend
  rules:
    - if: $BUILD_UBUNTU_IMAGES =~ /^(1|yes|true)$/
      when: always
    - if: $CI_SERVER_URL != "https://salsa.debian.org"
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        IMAGE_VERSION: questing
        DEBIAN_IMAGE_VERSION: sid
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      variables:
        IMAGE_VERSION: questing_${CI_COMMIT_REF_SLUG}
        DEBIAN_IMAGE_VERSION: sid_${CI_COMMIT_REF_SLUG}
  parallel:
    matrix:
      - PROJECT_URL: https://salsa.debian.org/debian/grep
        PROJECT_TARGET_HEAD: debian/master

clean images:
  stage: clean
  image: docker:latest
  services:
    - docker:20.10.12-dind
  interruptible: true
  variables:
    IMAGES_LIST: |
      aptly
      base
      arm32v5/base
      arm32v7/base
      arm64v8/base
      i386/base
      ppc64el/base
      riscv64/base
      blhc
      build
      arm32v5/build
      arm32v7/build
      arm64v8/build
      i386/build
      ppc64el/build
      riscv64/build
      gbp
      piuparts
      reprotest
      lintian
      generic_tests
      arm64v8/blhc
      arm64v8/lintian
      arm64v8/piuparts
      arm64v8/reprotest
    AUTOPKGTEST_IMAGES_LIST: |
      autopkgtest
      i386/autopkgtest
      arm32v5/autopkgtest
      arm32v7/autopkgtest
      arm64v8/autopkgtest
    RELEASE: sid
    UBUNTU_IMAGES_LIST: |
      arm64v8/base
      base
      generic_tests
    UBUNTU_RELEASE: questing
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - wget -O /usr/bin/reg https://github.com/genuinetools/reg/releases/download/v0.13.0/reg-linux-amd64
    - chmod +x /usr/bin/reg
  script:
    - |
      # If not master, use REF as staging tag.
      if ! [ "${CI_COMMIT_REF_NAME}" = "master" ]; then
        STAGING_TAG="_${CI_COMMIT_REF_SLUG}"
      fi
    - |
      for IMAGE in $IMAGES_LIST; do
        reg --registry ${CI_REGISTRY} rm ${CI_PROJECT_PATH}/${IMAGE}:${RELEASE}${STAGING_TAG} || true
      done
    - |
      for IMAGE in $AUTOPKGTEST_IMAGES_LIST; do
        reg --registry ${CI_REGISTRY} rm ${CI_PROJECT_PATH}/${IMAGE}:${STABLE}${STAGING_TAG} || true
      done
    - |
      for IMAGE in $UBUNTU_IMAGES_LIST; do
        reg --registry ${CI_REGISTRY} rm ${CI_PROJECT_PATH}/${IMAGE}:${UBUNTU_RELEASE}${STAGING_TAG} || true
      done
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH && $SALSA_CI_PERSIST_IMAGES !~ /^(1|yes|true)$/
      when: always
